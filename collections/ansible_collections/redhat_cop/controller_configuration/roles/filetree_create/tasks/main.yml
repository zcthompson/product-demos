---
# tasks file for filetree_create
- name: "Check requirements (block)"
  tags:
    - always
  block:
    - name: "Check installed collections (block)"
      block:
        - name: "Check if the collection ansible.controller is installed"
          ansible.builtin.set_fact:
            ansible_controller_collection_installed: "{{ lookup('ansible.builtin.pipe', 'ansible-galaxy collection list | grep -i ansible.controller || echo NOTINSTALLED') }}"
          failed_when: ansible_controller_collection_installed is match('NOTINSTALLED')
      rescue:
        - name: "Check if the collection awx.awx is installed"
          ansible.builtin.set_fact:
            awx_awx_collection_installed: "{{ lookup('ansible.builtin.pipe', 'ansible-galaxy collection list | grep -i awx.awx || echo NOTINSTALLED') }}"
          failed_when: awx_awx_collection_installed is match('NOTINSTALLED')
      always:
        - name: "Set the collection providing the controller_api lookup plugin"
          ansible.builtin.set_fact:
            controller_api_plugin: "{{ ('ansible.controller.controller_api' if ansible_controller_collection_installed is defined) | default('awx.awx.controller_api' if awx_awx_collection_installed is defined) | default('NONE') }}"
        - name: "Fail if no collection is detected"
          ansible.builtin.fail:
            msg: "One of the following collections is required to be installed: 'ansible.controller' or 'awx.awx'."
          when: controller_api_plugin is match('NONE')
        - name: "Show the plugin we are using"
          ansible.builtin.debug:
            msg: "Using the 'controller_api' plugin from: {{ controller_api_plugin }}"

    - name: "Check if the required input variables are present"
      ansible.builtin.assert:
        that:
          - input_tag is defined
          - (input_tag | type_debug) == 'list'
        fail_msg: 'A variable called ''input_tag'' of type ''list'' is needed: -e ''{input_tag: [organizations, projects]}'''
        quiet: true

    - name: "Check if the required input values are correct"
      ansible.builtin.assert:
        that:
          - tag_item in valid_tags
        fail_msg: "The valid tags are the following ones: {{ valid_tags | join(', ') }}"
        quiet: true
      loop: "{{ input_tag }}"
      loop_control:
        loop_var: tag_item

- name: "Include Tasks to get all objects of type {{ input_tag }}"
  ansible.builtin.include_tasks: all.yml
  args:
    apply:
      tags: "{{ input_tag | to_yaml }}"
  tags: "{{ valid_tags }}"
...
