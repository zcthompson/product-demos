---
- name: "Get list of files inside {{ filetree_controller_inventory_sources }}"
  ansible.builtin.find:
    paths: "{{ filetree_controller_inventory_sources }}"
    file_type: file
    recurse: true
  register: __list_files_controller_inventory_sources

- name: "Read Inventory Sources definitions"
  ansible.builtin.include_vars:
    file: "{{ __read_inventory_sources_definitions_item.path }}"
  loop: "{{ __list_files_controller_inventory_sources.files }}"
  loop_control:
    loop_var: __read_inventory_sources_definitions_item
  register: __contents_filetree_controller_inventory_sources

- name: "Populate Inventory Sources list"
  ansible.builtin.set_fact:
    __populate_controller_inventory_sources: "{{ (__populate_controller_inventory_sources | default([])) + __populate_inventory_sources_list_item.ansible_facts.controller_inventory_sources }}"
  loop: "{{ __contents_filetree_controller_inventory_sources.results }}"
  loop_control:
    loop_var: __populate_inventory_sources_list_item
  when: __contents_filetree_controller_inventory_sources.results is defined and __populate_inventory_sources_list_item.ansible_facts.controller_inventory_sources is defined

- name: "Segregated Inventory Sources list when controller_location is defined"
  when: controller_location is defined and __populate_controller_inventory_sources is defined
  block:
    - name: "Populate Inventory Sources list by _common objects"
      ansible.builtin.set_fact:
        __populate_controller_inventory_sources_common: "{{ (__populate_controller_inventory_sources_common | default([])) + [__populate_inventory_sources_list_common_item] }}"
      loop: "{{ __populate_controller_inventory_sources }}"
      loop_control:
        loop_var: __populate_inventory_sources_list_common_item
      when: "__populate_inventory_sources_list_common_item.controller_location is not defined"

    - name: "Populate Inventory Sources list by __site objects"
      ansible.builtin.set_fact:
        __populate_controller_inventory_sources_site: "{{ (__populate_controller_inventory_sources_site | default([])) + [__populate_inventory_sources_list_site_item] }}"
      loop: "{{ __populate_controller_inventory_sources }}"
      loop_control:
        loop_var: __populate_inventory_sources_list_site_item
      when: "__populate_inventory_sources_list_site_item.controller_location is defined and __populate_inventory_sources_list_site_item.controller_location == controller_location"

    - name: "Concatenate Inventory Sources list common + site"
      ansible.builtin.set_fact:
        __populate_controller_inventory_sources_total: "{{ __populate_controller_inventory_sources_common | default([]) + __populate_controller_inventory_sources_site }}"
      when: __populate_controller_inventory_sources_site is defined

    - name: "Set Inventory Sources Data Structure common + site concatenated"
      ansible.builtin.set_fact:
        __populate_controller_inventory_sources: "{{ __populate_controller_inventory_sources_total }}"
      when: __populate_controller_inventory_sources_total is defined

- name: "Set Inventory Sources Data Structure"
  ansible.builtin.set_fact:
    controller_inventory_sources: "{{ __populate_controller_inventory_sources }}"
  when: __populate_controller_inventory_sources is defined
...
